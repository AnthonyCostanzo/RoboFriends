{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","Header","nextProps","nextState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearchField","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3db761d.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Card = (props) => {\n    const {name,email,id} = props;\n    return (\n        <div className ='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt = \"robot\" src ={`https://robohash.org/${id}200*200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = (props)=>\n{\n    const {robots} = props;\n    \n    return (\n        <div>\n        {\n            robots.map((user,i)=> {\n                return (\n                    <Card key  = {i} id={robots[i].id} name ={robots[i].name} email = {robots[i].email}/>\n            );\n        })\n        }\n        </div>  \n    );\n}\n\n\n\nexport default CardList","import React from 'react';\n\nconst SearchBox = (props) =>\n{\n    let {searchChange} = props;\n    return (\n        <div className = 'pa2'>\n        <input onChange = {searchChange} className='pa3 ba b--green bg-lighest-blue' type = 'search' placeholder = 'search robots'/>\n        </div>\n    )\n}\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>\n{\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n    \n}\n\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundry extends React.Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state = { hasError : false}\n\t}\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({hasError : true})\n\t}\n\trender()\n\t{\n\t\tif(this.state.hasError)\n\t\t{\n\t\t\treturn <h1>Error</h1>\n\t\t}\n\t\treturn this.props.children;\n    }\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\n\nclass Header extends React.Component \n{\n    // if this returns true it updates component, shouldComponentUpdate receives nextProps and nextState\n    shouldComponentUpdate(nextProps,nextState)\n    {\n        return false; //by doing this the header component will only render once;\n    }\n    \n    render()\n    {\n        return <h1 className='f1'>RoboFriends</h1>\n    }\n}\n\nexport default Header;","import React from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/Cardlist';\nimport SearchBox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport './App.css'\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n\nimport {requestRobots,setSearchField } from '../actions.js';\n\nconst mapStateToProps = state =>\n{\n  return {\n    searchField: state.searchRobots.searchField,\n    robots:state.requestRobots.robots,\n    isPending:state.requestRobots.isPending,\n    error:state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) =>\n{\n  return {\n    onSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\n    onRequestRobots:()=> dispatch(requestRobots())\n  }\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n    }\n  }\n  componentDidMount()\n  {\n    this.props.onRequestRobots();\n  }\n  render() {\n    const {searchField,onSearchChange,robots,isPending} = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header/>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n              <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n              </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\n\n\n\n","import {SET_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constants.js';\n\n\n// wrapping the function in parentheses automatically makes it return what is inside of the function \nexport const setSearchField = (text) => (\n    {\n        type:SET_SEARCH_FIELD,\n        payload:text\n    }\n)\n\nexport const requestRobots = ()=> (dispatch) => \n{\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=> response.json()).then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data})).catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\n}\n","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SET_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constants.js';\n\n\nconst initialStateSearchField = {\n    searchField:\"\"\n}\n\nconst initialStateRobots = \n{\n    isPending:false,\n    robots: [],\n    error:\"\"\n}\n\nexport const searchRobots = (state = initialStateSearchField,action = {})=>\n{\n    switch(action.type)\n    {\n        case SET_SEARCH_FIELD:\n            return {...state,searchField:action.payload}\n        default:\n            return state\n    }\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {})=>\n{\n    switch(action.type)\n    {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state,isPending:true}\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state,robots:action.payload,isPending:false}\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error:action.payload,isPending:false};\n        default:\n            return state; \n     }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots,requestRobots} from './reducers';\n\nconst logger = createLogger(); \nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\nReactDOM.render(\n    <Provider store = {store}>\n       <App />\n    </Provider>, document.getElementById('root')\n   );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}